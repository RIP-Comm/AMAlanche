basePath: /api
definitions:
  dto.AuthGoogleLoginRequest:
    properties:
      code:
        type: string
    required:
      - code
    type: object
  dto.AuthGoogleRefreshRequest:
    properties:
      refreshToken:
        type: string
    required:
      - refreshToken
    type: object
  dto.AuthGoogleTokenResponse:
    properties:
      accessToken:
        type: string
      expiry:
        type: string
      refreshToken:
        type: string
      userId:
        type: integer
    type: object
  dto.AuthInternalLoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
      - password
      - username
    type: object
  dto.AuthInternalLoginResponse:
    properties:
      accessToken:
        type: string
      expiry:
        type: string
      userId:
        type: integer
    type: object
  dto.ChannelCreateRequest:
    properties:
      name:
        type: string
    required:
      - name
    type: object
  dto.ChannelCreateResponse:
    properties:
      id:
        type: integer
      name:
        type: string
      ownerId:
        type: integer
    type: object
  dto.ChannelResponse:
    properties:
      id:
        type: integer
      name:
        type: string
      ownerId:
        type: integer
    type: object
  dto.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  dto.QaCreateRequest:
    properties:
      parentId:
        type: integer
      question:
        type: string
    required:
      - question
    type: object
  dto.QaResponse:
    properties:
      channelId:
        type: integer
      children:
        items:
          $ref: '#/definitions/dto.QaResponse'
        type: array
      id:
        type: integer
      ownerId:
        type: integer
      question:
        type: string
      username:
        type: string
    type: object
  dto.UserCreateRequest:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
      - email
      - password
      - username
    type: object
  dto.UserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  dto.UserUpdateRequest:
    properties:
      username:
        type: string
    required:
      - username
    type: object
  entity.Channel:
    properties:
      createdAt:
        type: string
      deletedAt:
        type: string
      id:
        type: integer
      members:
        items:
          $ref: '#/definitions/entity.User'
        type: array
      name:
        type: string
      ownerId:
        type: integer
      qas:
        items:
          $ref: '#/definitions/entity.Qa'
        type: array
      updatedAt:
        type: string
    type: object
  entity.Qa:
    properties:
      channelId:
        type: integer
      children:
        items:
          $ref: '#/definitions/entity.Qa'
        type: array
      createdAt:
        type: string
      deletedAt:
        type: string
      id:
        type: integer
      ownerId:
        type: integer
      parentId:
        type: integer
      question:
        type: string
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/entity.User'
    type: object
  entity.User:
    properties:
      channels:
        items:
          $ref: '#/definitions/entity.Channel'
        type: array
      createdAt:
        type: string
      deletedAt:
        type: string
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      role:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: { }
  description: :)
  title: AMAlanche
paths:
  /auth/google-login:
    post:
      consumes:
        - application/json
      description: Perform Google login using an authorization code and return an
        access token.
      parameters:
        - description: Google login request
          in: body
          name: requestBody
          required: true
          schema:
            $ref: '#/definitions/dto.AuthGoogleLoginRequest'
      produces:
        - application/json
      responses:
        "200":
          description: Successfully generated Google access token
          schema:
            $ref: '#/definitions/dto.AuthGoogleTokenResponse'
        "400":
          description: Invalid JSON request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Perform Google login using authorization code
      tags:
        - Auth
  /auth/google-refresh:
    post:
      consumes:
        - application/json
      description: Update a Google access token using a refresh token and return the
        new access token.
      parameters:
        - description: Google access token refresh request
          in: body
          name: refreshRequest
          required: true
          schema:
            $ref: '#/definitions/dto.AuthGoogleRefreshRequest'
      produces:
        - application/json
      responses:
        "200":
          description: Successfully updated Google access token
          schema:
            $ref: '#/definitions/dto.AuthGoogleTokenResponse'
        "400":
          description: Invalid JSON request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Update a Google access token using a refresh token
      tags:
        - Auth
  /auth/internal-login:
    post:
      consumes:
        - application/json
      description: Perform internal login using credentials and return an access token.
      parameters:
        - description: Internal login request
          in: body
          name: requestBody
          required: true
          schema:
            $ref: '#/definitions/dto.AuthInternalLoginRequest'
      produces:
        - application/json
      responses:
        "200":
          description: Successfully generated internal access token
          schema:
            $ref: '#/definitions/dto.AuthInternalLoginResponse'
        "400":
          description: Invalid JSON request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Perform internal login using credentials
      tags:
        - Auth
  /channels/{channelId}/users/{userId}/qa:
    post:
      consumes:
        - application/json
      description: Create a new Q&A in the specified channel for the authenticated
        user.
      parameters:
        - description: ID of the user creating the Q&A
          in: path
          name: userId
          required: true
          type: integer
        - description: ID of the channel where the Q&A is being created
          in: path
          name: channelId
          required: true
          type: integer
        - description: Q&A creation data
          in: body
          name: requestBody
          required: true
          schema:
            $ref: '#/definitions/dto.QaCreateRequest'
      produces:
        - application/json
      responses:
        "200":
          description: Q&A created successfully
          schema:
            $ref: '#/definitions/dto.QaResponse'
        "400":
          description: Bad request, invalid JSON or missing parameters
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden access, user does not have permission
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error, could not create Q&A
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Create a new Q&A entry
      tags:
        - QA
  /user/{userId}/channel:
    post:
      consumes:
        - application/json
      description: Create a new channel for a specific user.
      parameters:
        - description: ID of the user who owns the channel
          in: path
          name: userId
          required: true
          type: integer
        - description: Channel creation data
          in: body
          name: dto.channelCreateRequest
          required: true
          schema:
            $ref: '#/definitions/dto.ChannelCreateRequest'
      produces:
        - application/json
      responses:
        "200":
          description: Channel created successfully
          schema:
            $ref: '#/definitions/dto.ChannelCreateResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden access
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Create a channel
      tags:
        - Channels
  /users:
    post:
      consumes:
        - application/json
      description: Creates a new user with the provided details.
      parameters:
        - description: User creation request
          in: body
          name: requestBody
          required: true
          schema:
            $ref: '#/definitions/dto.UserCreateRequest'
      produces:
        - application/json
      responses:
        "200":
          description: User created successfully
          schema:
            $ref: '#/definitions/entity.User'
        "400":
          description: Invalid JSON request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Create a new user
      tags:
        - Users
  /users/{id}:
    get:
      consumes:
        - application/json
      description: Retrieves user information based on the provided user ID.
      parameters:
        - description: User ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: User information retrieved successfully
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Invalid or missing ID
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Retrieve user information by ID
      tags:
        - Users
    put:
      consumes:
        - application/json
      description: Updates user information based on the provided user ID and request
        details.
      parameters:
        - description: User ID
          in: path
          name: id
          required: true
          type: integer
        - description: User update request
          in: body
          name: requestBody
          required: true
          schema:
            $ref: '#/definitions/dto.UserUpdateRequest'
      produces:
        - application/json
      responses:
        "200":
          description: User information updated successfully
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Invalid or missing ID or JSON request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden action
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Update user information by ID
      tags:
        - Users
  /users/{userId}/channels/{channelId}:
    get:
      consumes:
        - application/json
      description: Retrieves the details of a channel by its ID for the authenticated
        user.
      parameters:
        - description: ID of the authenticated user
          in: path
          name: userId
          required: true
          type: integer
        - description: ID of the channel to retrieve
          in: path
          name: channelId
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: Channel details retrieved successfully
          schema:
            $ref: '#/definitions/dto.ChannelResponse'
        "400":
          description: Bad request, user or channel ID is invalid
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden access, user is not allowed to access this channel
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Channel not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get channel by ID
      tags:
        - Channels
  /users/{userId}/channels/{channelId}/join:
    post:
      consumes:
        - application/json
      description: Join a channel with the provided channel ID as a user.
      parameters:
        - description: ID of the user attempting to join the channel
          in: path
          name: userId
          required: true
          type: integer
        - description: ID of the channel to join
          in: path
          name: channelId
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: User successfully joined the channel
          schema:
            $ref: '#/definitions/dto.ChannelResponse'
        "400":
          description: Bad request, invalid user or channel ID
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden access, user trying to join a channel with different
            user ID
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Channel not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: User joins a channel
      tags:
        - Channels
  /users/{userId}/channels/all:
    get:
      consumes:
        - application/json
      description: Retrieve all channels associated with a specific user.
      parameters:
        - description: ID of the user
          in: path
          name: userId
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: Channels retrieved successfully
          schema:
            items:
              $ref: '#/definitions/dto.ChannelResponse'
            type: array
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden access
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get all channels for a user
      tags:
        - Channels
  /users/{userId}/channels/member:
    get:
      consumes:
        - application/json
      description: Retrieve all visible channels, you don't own, associated with a
        specific user.
      parameters:
        - description: ID of the user
          in: path
          name: userId
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: Visible channels retrieved successfully
          schema:
            items:
              $ref: '#/definitions/dto.ChannelResponse'
            type: array
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden access
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get all channels visible for a user you don't own
      tags:
        - Channels
  /users/{userId}/channels/owned:
    get:
      consumes:
        - application/json
      description: Retrieve all channels owned by a specific user.
      parameters:
        - description: ID of the user
          in: path
          name: userId
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: Owned channels retrieved successfully
          schema:
            items:
              $ref: '#/definitions/dto.ChannelResponse'
            type: array
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden access
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get all channels owned by a user
      tags:
        - Channels
swagger: "2.0"
