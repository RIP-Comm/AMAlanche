{
  "swagger": "2.0",
  "info": {
    "description": ":)",
    "title": "AMAlanche",
    "contact": {}
  },
  "host": "localhost:8080",
  "basePath": "/api",
  "paths": {
    "/auth/google-login": {
      "post": {
        "description": "Perform Google login using an authorization code and return an access token.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Auth"
        ],
        "summary": "Perform Google login using authorization code",
        "parameters": [
          {
            "description": "Google login request",
            "name": "requestBody",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/dto.AuthGoogleLoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully generated Google access token",
            "schema": {
              "$ref": "#/definitions/dto.AuthGoogleTokenResponse"
            }
          },
          "400": {
            "description": "Invalid JSON request",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          }
        }
      }
    },
    "/auth/google-refresh": {
      "post": {
        "description": "Update a Google access token using a refresh token and return the new access token.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Auth"
        ],
        "summary": "Update a Google access token using a refresh token",
        "parameters": [
          {
            "description": "Google access token refresh request",
            "name": "refreshRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/dto.AuthGoogleRefreshRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated Google access token",
            "schema": {
              "$ref": "#/definitions/dto.AuthGoogleTokenResponse"
            }
          },
          "400": {
            "description": "Invalid JSON request",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          }
        }
      }
    },
    "/auth/internal-login": {
      "post": {
        "description": "Perform internal login using credentials and return an access token.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Auth"
        ],
        "summary": "Perform internal login using credentials",
        "parameters": [
          {
            "description": "Internal login request",
            "name": "requestBody",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/dto.AuthInternalLoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully generated internal access token",
            "schema": {
              "$ref": "#/definitions/dto.AuthInternalLoginResponse"
            }
          },
          "400": {
            "description": "Invalid JSON request",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          },
          "401": {
            "description": "Invalid credentials",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          }
        }
      }
    },
    "/channels/{channelId}/users/{userId}/qa": {
      "post": {
        "description": "Create a new Q\u0026A in the specified channel for the authenticated user.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "QA"
        ],
        "summary": "Create a new Q\u0026A entry",
        "parameters": [
          {
            "type": "integer",
            "description": "ID of the user creating the Q\u0026A",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "ID of the channel where the Q\u0026A is being created",
            "name": "channelId",
            "in": "path",
            "required": true
          },
          {
            "description": "Q\u0026A creation data",
            "name": "requestBody",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/dto.QaCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Q\u0026A created successfully",
            "schema": {
              "$ref": "#/definitions/dto.QaResponse"
            }
          },
          "400": {
            "description": "Bad request, invalid JSON or missing parameters",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden access, user does not have permission",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error, could not create Q\u0026A",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          }
        }
      }
    },
    "/user/{userId}/channel": {
      "post": {
        "description": "Create a new channel for a specific user.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Channels"
        ],
        "summary": "Create a channel",
        "parameters": [
          {
            "type": "integer",
            "description": "ID of the user who owns the channel",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "description": "Channel creation data",
            "name": "dto.channelCreateRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/dto.ChannelCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Channel created successfully",
            "schema": {
              "$ref": "#/definitions/dto.ChannelCreateResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden access",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          }
        }
      }
    },
    "/users": {
      "post": {
        "description": "Creates a new user with the provided details.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Create a new user",
        "parameters": [
          {
            "description": "User creation request",
            "name": "requestBody",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/dto.UserCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User created successfully",
            "schema": {
              "$ref": "#/definitions/entity.User"
            }
          },
          "400": {
            "description": "Invalid JSON request",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "description": "Retrieves user information based on the provided user ID.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Retrieve user information by ID",
        "parameters": [
          {
            "type": "integer",
            "description": "User ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User information retrieved successfully",
            "schema": {
              "$ref": "#/definitions/dto.UserResponse"
            }
          },
          "400": {
            "description": "Invalid or missing ID",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          }
        }
      },
      "put": {
        "description": "Updates user information based on the provided user ID and request details.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "summary": "Update user information by ID",
        "parameters": [
          {
            "type": "integer",
            "description": "User ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "User update request",
            "name": "requestBody",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/dto.UserUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User information updated successfully",
            "schema": {
              "$ref": "#/definitions/dto.UserResponse"
            }
          },
          "400": {
            "description": "Invalid or missing ID or JSON request",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden action",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          }
        }
      }
    },
    "/users/{userId}/channels/all": {
      "get": {
        "description": "Retrieve all channels associated with a specific user.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Channels"
        ],
        "summary": "Get all channels for a user",
        "parameters": [
          {
            "type": "integer",
            "description": "ID of the user",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Channels retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/dto.ChannelResponse"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden access",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          }
        }
      }
    },
    "/users/{userId}/channels/member": {
      "get": {
        "description": "Retrieve all visible channels, you don't own, associated with a specific user.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Channels"
        ],
        "summary": "Get all channels visible for a user you don't own",
        "parameters": [
          {
            "type": "integer",
            "description": "ID of the user",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Visible channels retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/dto.ChannelResponse"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden access",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          }
        }
      }
    },
    "/users/{userId}/channels/owned": {
      "get": {
        "description": "Retrieve all channels owned by a specific user.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Channels"
        ],
        "summary": "Get all channels owned by a user",
        "parameters": [
          {
            "type": "integer",
            "description": "ID of the user",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Owned channels retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/dto.ChannelResponse"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden access",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          }
        }
      }
    },
    "/users/{userId}/channels/{channelId}": {
      "get": {
        "description": "Retrieves the details of a channel by its ID for the authenticated user.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Channels"
        ],
        "summary": "Get channel by ID",
        "parameters": [
          {
            "type": "integer",
            "description": "ID of the authenticated user",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "ID of the channel to retrieve",
            "name": "channelId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Channel details retrieved successfully",
            "schema": {
              "$ref": "#/definitions/dto.ChannelResponse"
            }
          },
          "400": {
            "description": "Bad request, user or channel ID is invalid",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden access, user is not allowed to access this channel",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          },
          "404": {
            "description": "Channel not found",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          }
        }
      }
    },
    "/users/{userId}/channels/{channelId}/join": {
      "post": {
        "description": "Join a channel with the provided channel ID as a user.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Channels"
        ],
        "summary": "User joins a channel",
        "parameters": [
          {
            "type": "integer",
            "description": "ID of the user attempting to join the channel",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "ID of the channel to join",
            "name": "channelId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully joined the channel",
            "schema": {
              "$ref": "#/definitions/dto.ChannelResponse"
            }
          },
          "400": {
            "description": "Bad request, invalid user or channel ID",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden access, user trying to join a channel with different user ID",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          },
          "404": {
            "description": "Channel not found",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/dto.ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "dto.AuthGoogleLoginRequest": {
      "type": "object",
      "required": [
        "code"
      ],
      "properties": {
        "code": {
          "type": "string"
        }
      }
    },
    "dto.AuthGoogleRefreshRequest": {
      "type": "object",
      "required": [
        "refreshToken"
      ],
      "properties": {
        "refreshToken": {
          "type": "string"
        }
      }
    },
    "dto.AuthGoogleTokenResponse": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string"
        },
        "expiry": {
          "type": "string"
        },
        "refreshToken": {
          "type": "string"
        },
        "userId": {
          "type": "integer"
        }
      }
    },
    "dto.AuthInternalLoginRequest": {
      "type": "object",
      "required": [
        "password",
        "username"
      ],
      "properties": {
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "dto.AuthInternalLoginResponse": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string"
        },
        "expiry": {
          "type": "string"
        },
        "userId": {
          "type": "integer"
        }
      }
    },
    "dto.ChannelCreateRequest": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "dto.ChannelCreateResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "ownerId": {
          "type": "integer"
        }
      }
    },
    "dto.ChannelResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "ownerId": {
          "type": "integer"
        }
      }
    },
    "dto.ErrorResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        }
      }
    },
    "dto.QaCreateRequest": {
      "type": "object",
      "required": [
        "question"
      ],
      "properties": {
        "parentId": {
          "type": "integer"
        },
        "question": {
          "type": "string"
        }
      }
    },
    "dto.QaResponse": {
      "type": "object",
      "properties": {
        "channelId": {
          "type": "integer"
        },
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/dto.QaResponse"
          }
        },
        "id": {
          "type": "integer"
        },
        "ownerId": {
          "type": "integer"
        },
        "question": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "dto.UserCreateRequest": {
      "type": "object",
      "required": [
        "email",
        "password",
        "username"
      ],
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "dto.UserResponse": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "dto.UserUpdateRequest": {
      "type": "object",
      "required": [
        "username"
      ],
      "properties": {
        "username": {
          "type": "string"
        }
      }
    },
    "entity.Channel": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string"
        },
        "deletedAt": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/entity.User"
          }
        },
        "name": {
          "type": "string"
        },
        "ownerId": {
          "type": "integer"
        },
        "qas": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/entity.Qa"
          }
        },
        "updatedAt": {
          "type": "string"
        }
      }
    },
    "entity.Qa": {
      "type": "object",
      "properties": {
        "channelId": {
          "type": "integer"
        },
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/entity.Qa"
          }
        },
        "createdAt": {
          "type": "string"
        },
        "deletedAt": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "ownerId": {
          "type": "integer"
        },
        "parentId": {
          "type": "integer"
        },
        "question": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/entity.User"
        }
      }
    },
    "entity.User": {
      "type": "object",
      "properties": {
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/entity.Channel"
          }
        },
        "createdAt": {
          "type": "string"
        },
        "deletedAt": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "password": {
          "type": "string"
        },
        "role": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    }
  }
}